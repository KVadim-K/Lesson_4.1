# Задача: Создай класс Task, который позволяет управлять задачами (делами). У задачи должны быть атрибуты:
# описание задачи, срок выполнения и статус (выполнено/не выполнено). Реализуй функцию для добавления задач,
# отметки выполненных задач и вывода списка текущих (не выполненных) задач.

class Task:
    # Конструктор класса с параметрами: имя, описание, срок выполнения
    def __init__(self, name, description, deadline):
        self.name = name  # Имя задачи
        self.description = description  # Описание задачи
        self.deadline = deadline  # Срок выполнения задачи
        self.status = "не выполнено"  # Статус задачи, начальное значение "не выполнено"

    # Метод для отметки задачи как выполненной
    def mark_as_done(self):
        self.status = "выполнено"

    # Метод для представления задачи в виде строки
    def __str__(self):
        return f"Задача: {self.name}, Описание: {self.description}, Срок: {self.deadline}\nСтатус: {self.status}"


# Определение класса TaskManager для управления списком задач
class TaskManager:
    # Конструктор класса, инициализирует список задач
    def __init__(self):
        self.tasks = [] # Список задач по умолчанию пуст

    # Метод для добавления новой задачи
    def add_task(self, name, description, deadline):
        new_task = Task(name, description, deadline)  # Создание новой задачи
        self.tasks.append(new_task)  # Добавление задачи в список
        print(f"Задача '{name}' добавлена.")  # Вывод сообщения о добавлении задачи

    # Метод для отметки задачи как выполненной по имени
    def mark_task_done(self, name):  # Параметр - имя задачи для поиска
        for task in self.tasks:  # Перебор всех задач в списке
            if task.name == name and task.status == "не выполнено":  # Поиск задачи по имени и статусу
                task.mark_as_done()  # Отметка задачи как выполненной
                print(f"Задача '{name}' отмечена как выполненная.")
                return  # Выход из метода после изменения статуса
        print(f"Задача '{name}' не найдена или уже выполнена.")  # Сообщение, если задача не найдена или уже выполнена

    # Метод для вывода списка невыполненных задач
    def show_pending_tasks(self):
        print("Текущие задачи:")
        pending_tasks = [task for task in self.tasks if task.status == "не выполнено"]  # Список невыполненных задач
        if not pending_tasks:
            print("Все задачи выполнены.")  # Сообщение, если все задачи выполнены
        else:
            for task in pending_tasks:  # Вывод каждой невыполненной задачи
                print(task)


# Пример использования
manager = TaskManager()  # Создание объекта управления задачами
manager.add_task("Покупки", "Купить молоко и хлеб", "2023-12-01")  # Добавление задачи
manager.add_task("Отчет", "Подготовить отчет по продажам за ноябрь", "2023-11-30")  # Добавление задачи
manager.show_pending_tasks()  # Вывод невыполненных задач
manager.mark_task_done("Покупки")  # Отметка задачи как выполненной
manager.mark_task_done("Отчет")
manager.show_pending_tasks()  # Вывод невыполненных задач
